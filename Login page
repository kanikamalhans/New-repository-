To create a login page in React that resembles the design used by Wells Fargo, we can focus on a clean and professional look with the following features:

1. **Simple Layout**: Centralized form with inputs for KID and password.
2. **Brand Colors**: Use a color scheme similar to Wells Fargo (red, white, and yellow accents).
3. **Responsive Design**: Ensure the form is responsive and works well on both desktop and mobile devices.
4. **Basic Styling**: Include necessary styling to reflect a professional look and feel.

Here's a step-by-step guide to create this login page:

### Step 1: Set Up Your React Project

If you haven't already, you can create a new React project using Create React App:

```bash
npx create-react-app login-page
cd login-page
```

### Step 2: Install Dependencies

Install any additional dependencies you might need. For this simple example, we’ll stick to the basics without additional libraries.

### Step 3: Create the Login Component

In the `src` directory, create a file called `Login.js` and add the following code:

```jsx
// src/Login.js

import React, { useState } from 'react';
import './Login.css';

const Login = () => {
  const [kid, setKid] = useState('');
  const [password, setPassword] = useState('');

  const handleLogin = (e) => {
    e.preventDefault();
    // Handle login logic here
    console.log('Logging in with KID:', kid, 'Password:', password);
  };

  return (
    <div className="login-container">
      <div className="login-box">
        <h2>Login</h2>
        <form onSubmit={handleLogin}>
          <div className="input-group">
            <label htmlFor="kid">KID</label>
            <input
              type="text"
              id="kid"
              value={kid}
              onChange={(e) => setKid(e.target.value)}
              required
            />
          </div>
          <div className="input-group">
            <label htmlFor="password">Password</label>
            <input
              type="password"
              id="password"
              value={password}
              onChange={(e) => setPassword(e.target.value)}
              required
            />
          </div>
          <button type="submit" className="login-button">Login</button>
        </form>
      </div>
    </div>
  );
};

export default Login;
```

### Step 4: Add CSS Styling

Create a `Login.css` file in the `src` directory for styling:

```css
/* src/Login.css */

body {
  margin: 0;
  font-family: Arial, sans-serif;
  background-color: #f5f5f5;
}

.login-container {
  display: flex;
  justify-content: center;
  align-items: center;
  height: 100vh;
}

.login-box {
  background-color: white;
  padding: 2rem;
  border-radius: 8px;
  box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);
  width: 300px;
  text-align: center;
}

.login-box h2 {
  margin-bottom: 1.5rem;
  color: #e31937; /* Wells Fargo red */
}

.input-group {
  margin-bottom: 1rem;
  text-align: left;
}

.input-group label {
  display: block;
  margin-bottom: 0.5rem;
  color: #333;
}

.input-group input {
  width: 100%;
  padding: 0.5rem;
  border: 1px solid #ccc;
  border-radius: 4px;
}

.login-button {
  background-color: #e31937; /* Wells Fargo red */
  color: white;
  padding: 0.5rem 1rem;
  border: none;
  border-radius: 4px;
  cursor: pointer;
  font-size: 1rem;
}

.login-button:hover {
  background-color: #b7152a;
}

@media (max-width: 600px) {
  .login-box {
    width: 100%;
    padding: 1rem;
  }
}
```

### Step 5: Use the Login Component in App.js

Replace the default content in `App.js` to render the `Login` component:

```jsx
// src/App.js

import React from 'react';
import Login from './Login';

function App() {
  return (
    <div className="App">
      <Login />
    </div>
  );
}

export default App;
```

### Step 6: Run Your Application

Start your application by running:

```bash
npm start
```

### Summary

This setup gives you a clean login page inspired by Wells Fargo’s design principles. You can further enhance it by adding additional styling, form validation, and integrating it with your backend authentication logic.
