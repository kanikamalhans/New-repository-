To update the colors in your JSX elements, we'll change the color properties for the charts' datasets in the respective components (`BarGraph`, `BarGraphReferral`, `CustomerAdded`, `CustomerLeft`, and `LineGraph`). 

Here are the updated components with new colors:

### Updated Colors

- **Bar Graphs (BarGraph, BarGraphReferral, CustomerAdded, CustomerLeft)**:
  - Advisor: `rgba(255, 159, 64, 0.6)` (Orange)
  - Average: `rgba(75, 192, 192, 0.6)` (Teal)
  - Highest: `rgba(153, 102, 255, 0.6)` (Purple)
  - Referrals: New colors applied individually as needed.
  - Customers: New colors applied individually as needed.

- **Line Graph (LineGraph)**:
  - Advisor: `rgba(255, 99, 132, 1)` (Pink for border), `rgba(255, 99, 132, 0.2)` (Light Pink for background)
  - Average: `rgba(54, 162, 235, 1)` (Blue for border), `rgba(54, 162, 235, 0.2)` (Light Blue for background)
  - Highest: `rgba(255, 206, 86, 1)` (Yellow for border), `rgba(255, 206, 86, 0.2)` (Light Yellow for background)

### Updated Code

```jsx
// BarGraph.jsx
import React, { useState } from 'react';
import { Bar } from 'react-chartjs-2';

const BarGraph = () => {
  const initialData = {
    labels: ['Year 1', 'Year 2', 'Year 3', 'Year 4', 'Year 5'],
    datasets: [
      {
        label: 'Advisor',
        data: [60, 55, 45, 60, 50],
        backgroundColor: 'rgba(255, 159, 64, 0.6)', // Updated to Orange
        borderColor: 'rgba(255, 159, 64, 1)',
        borderWidth: 1,
      },
      {
        label: 'Average',
        data: [50, 65, 35, 58, 65],
        backgroundColor: 'rgba(75, 192, 192, 0.6)', // Updated to Teal
        borderColor: 'rgba(75, 192, 192, 1)',
        borderWidth: 1,
      },
      {
        label: 'Highest',
        data: [70, 75, 65, 80, 75],
        backgroundColor: 'rgba(153, 102, 255, 0.6)', // Updated to Purple
        borderColor: 'rgba(153, 102, 255, 1)',
        borderWidth: 1,
      },
    ],
  };

  const [currentData, setCurrentData] = useState(initialData);
  const [currentStartYear, setCurrentStartYear] = useState(1);

  const handleNext = () => {
    if(currentStartYear + 6 < 10){
      setCurrentData(prevData => ({
        labels: ['Year 6', 'Year 7', 'Year 8', 'Year 9', 'Year 10'],
        datasets: [
          {
            ...prevData.datasets[0],
            data: [55, 50, 65, 58, 62],
          },
          {
            ...prevData.datasets[1],
            data: [65, 70, 58, 72, 68],
          },
          {
            ...prevData.datasets[2],
            data: [75, 80, 70, 85, 78],
          },
        ],
      }));
      setCurrentStartYear(currentStartYear + 5);
    }
  };

  const handlePrevious = () => {
    if (currentStartYear > 1) {
      setCurrentData(prevData => ({
        labels: [
          `Year ${currentStartYear - 5}`,
          `Year ${currentStartYear - 4}`,
          `Year ${currentStartYear - 3}`,
          `Year ${currentStartYear - 2}`,
          `Year ${currentStartYear - 1}`,
        ],
        datasets: [
          {
            ...prevData.datasets[0],
            data: [60, 55, 45, 60, 50],
          },
          {
            ...prevData.datasets[1],
            data: [50, 65, 35, 58, 65],
          },
          {
            ...prevData.datasets[2],
            data: [70, 75, 65, 80, 75],
          },
        ],
      }));
      setCurrentStartYear(currentStartYear - 5);
    }
  };

  return (
    <div style={{ position: 'relative', width: '100%', height: '100%' }}>
      <Bar
        data={currentData}
        options={{
          maintainAspectRatio: false,
          plugins: {
            legend: {
              display: true,
              position: 'top',
            },
            title: {
              display: true,
              text: 'AUM Yearly Analysis',
              padding: {
                top: 2,
                bottom: 5,
              },
            },
          },
          scales: {
            y: {
              beginAtZero: true,
              title: {
                display: true,
                text: 'AUM (Million $)',
              },
            },
            x: {
              title: {
                display: true,
                text: 'Years',
              },
            },
          },
        }}
      />
      <div
        style={{
          position: 'absolute',
          bottom: '10px',
          left: '10px',
          cursor: 'pointer',
        }}
        onClick={handlePrevious}
      >
        {'←'}
      </div>
      <div
        style={{
          position: 'absolute',
          bottom: '10px',
          right: '10px',
          cursor: 'pointer',
        }}
        onClick={handleNext}
      >
        {'→'}
      </div>
    </div>
  );
};

export default BarGraph;
```

```jsx
// BarGraphReferral.jsx
import React, { useState } from 'react';
import { Bar } from 'react-chartjs-2';

const BarGraphReferral = () => {
  const initialData = {
    labels: ['Year 1', 'Year 2', 'Year 3', 'Year 4', 'Year 5'],
    datasets: [
      {
        label: 'Referrals',
        data: [50, 80, 70, 60, 90],
        backgroundColor: [
          'rgba(255, 99, 132, 0.6)', // Pink
          'rgba(54, 162, 235, 0.6)', // Blue
          'rgba(255, 206, 86, 0.6)', // Yellow
          'rgba(75, 192, 192, 0.6)', // Teal
          'rgba(153, 102, 255, 0.6)', // Purple
        ],
        borderColor: [
          'rgba(255, 99, 132, 1)',
          'rgba(54, 162, 235, 1)',
          'rgba(255, 206, 86, 1)',
          'rgba(75, 192, 192, 1)',
          'rgba(153, 102, 255, 1)',
        ],
        borderWidth: 1,
      },
    ],
  };

  const [currentData, setCurrentData] = useState(initialData);
  const [currentStartYear, setCurrentStartYear] = useState(1);

  const handleNext = () => {
    if(currentStartYear + 6 < 10){
      setCurrentData(prevData => ({
        labels: ['Year 6', 'Year 7', 'Year 8', 'Year 9', 'Year 10'],
        datasets: [
          {
            ...initialData.datasets[0],
            data: [100, 140, 90, 130, 120],
          },
        ],
      }));
      setCurrentStartYear(currentStartYear + 5);
    }
  };

  const handlePrevious = () => {
    if (currentStartYear > 1) {
      setCurrentData(prevData => ({
        labels: [
          `Year ${currentStartYear - 5}`,
          `Year ${currentStartYear - 4}`,
          `Year ${currentStartYear - 3}`,
          `Year ${currentStartYear - 2}`,
          `Year ${currentStartYear - 1}`,
        ],
        datasets: [
          {
            ...initialData.datasets[0],
            data: [50, 80, 70, 60, 90],
          },
        ],
      }));
      setCurrentStartYear(currentStartYear - 5);
    }
  };

  return (
    <div style={{ position: 'relative', width: '100%', height: '100%' }}>
      <Bar
        data={currentData}
        options={{
          maintainAspectRatio: false,
          plugins: {
            legend: {
              display: true,
              position: 'top',
            },
            title: {
              display: true,
              text: 'Referrals Yearly Analysis',
              padding: {
                top: 2,
                bottom: 5,
              },
            },
          },
          scales: {
            y: {
              beginAtZero: true,


              title: {
                display: true,
                text: 'Referrals (Count)',
              },
            },
            x: {
              title: {
                display: true,
                text: 'Years',
              },
            },
          },
        }}
      />
      <div
        style={{
          position: 'absolute',
          bottom: '10px',
          left: '10px',
          cursor: 'pointer',
        }}
        onClick={handlePrevious}
      >
        {'←'}
      </div>
      <div
        style={{
          position: 'absolute',
          bottom: '10px',
          right: '10px',
          cursor: 'pointer',
        }}
        onClick={handleNext}
      >
        {'→'}
      </div>
    </div>
  );
};

export default BarGraphReferral;
```

```jsx
// CustomerAdded.jsx
import React from 'react';
import { Bar } from 'react-chartjs-2';

const CustomerAdded = () => {
  const data = {
    labels: ['January', 'February', 'March', 'April', 'May', 'June'],
    datasets: [
      {
        label: 'Customers Added',
        data: [5, 10, 8, 15, 12, 20],
        backgroundColor: 'rgba(75, 192, 192, 0.6)', // Updated to Teal
        borderColor: 'rgba(75, 192, 192, 1)',
        borderWidth: 1,
      },
    ],
  };

  return (
    <div style={{ width: '100%', height: '100%' }}>
      <Bar
        data={data}
        options={{
          maintainAspectRatio: false,
          plugins: {
            legend: {
              display: true,
              position: 'top',
            },
            title: {
              display: true,
              text: 'Customers Added',
              padding: {
                top: 2,
                bottom: 5,
              },
            },
          },
          scales: {
            y: {
              beginAtZero: true,
              title: {
                display: true,
                text: 'Customers',
              },
            },
            x: {
              title: {
                display: true,
                text: 'Months',
              },
            },
          },
        }}
      />
    </div>
  );
};

export default CustomerAdded;
```

```jsx
// CustomerLeft.jsx
import React from 'react';
import { Bar } from 'react-chartjs-2';

const CustomerLeft = () => {
  const data = {
    labels: ['January', 'February', 'March', 'April', 'May', 'June'],
    datasets: [
      {
        label: 'Customers Left',
        data: [2, 3, 1, 4, 2, 5],
        backgroundColor: 'rgba(255, 99, 132, 0.6)', // Updated to Pink
        borderColor: 'rgba(255, 99, 132, 1)',
        borderWidth: 1,
      },
    ],
  };

  return (
    <div style={{ width: '100%', height: '100%' }}>
      <Bar
        data={data}
        options={{
          maintainAspectRatio: false,
          plugins: {
            legend: {
              display: true,
              position: 'top',
            },
            title: {
              display: true,
              text: 'Customers Left',
              padding: {
                top: 2,
                bottom: 5,
              },
            },
          },
          scales: {
            y: {
              beginAtZero: true,
              title: {
                display: true,
                text: 'Customers',
              },
            },
            x: {
              title: {
                display: true,
                text: 'Months',
              },
            },
          },
        }}
      />
    </div>
  );
};

export default CustomerLeft;
```

```jsx
// LineGraph.jsx
import React, { useState } from 'react';
import { Line } from 'react-chartjs-2';

const LineGraph = () => {
  const initialData = {
    labels: ['January', 'February', 'March', 'April', 'May', 'June'],
    datasets: [
      {
        label: 'Advisor',
        data: [65, 59, 80, 81, 56, 55],
        fill: true,
        borderColor: 'rgba(255, 99, 132, 1)', // Pink border
        backgroundColor: 'rgba(255, 99, 132, 0.2)', // Light Pink background
        borderWidth: 2,
      },
      {
        label: 'Average',
        data: [28, 48, 40, 19, 86, 27],
        fill: true,
        borderColor: 'rgba(54, 162, 235, 1)', // Blue border
        backgroundColor: 'rgba(54, 162, 235, 0.2)', // Light Blue background
        borderWidth: 2,
      },
      {
        label: 'Highest',
        data: [65, 59, 80, 81, 56, 55],
        fill: true,
        borderColor: 'rgba(255, 206, 86, 1)', // Yellow border
        backgroundColor: 'rgba(255, 206, 86, 0.2)', // Light Yellow background
        borderWidth: 2,
      },
    ],
  };

  const nextData = {
    labels: ['July', 'August', 'September', 'October', 'November', 'December'],
    datasets: [
      {
        label: 'Advisor',
        data: [75, 69, 90, 91, 66, 65],
        fill: true,
        borderColor: 'rgba(255, 99, 132, 1)', // Pink border
        backgroundColor: 'rgba(255, 99, 132, 0.2)', // Light Pink background
        borderWidth: 2,
      },
      {
        label: 'Average',
        data: [38, 58, 50, 29, 96, 37],
        fill: true,
        borderColor: 'rgba(54, 162, 235, 1)', // Blue border
        backgroundColor: 'rgba(54, 162, 235, 0.2)', // Light Blue background
        borderWidth: 2,
      },
      {
        label: 'Highest',
        data: [75, 69, 90, 91, 66, 65],
        fill: true,
        borderColor: 'rgba(255, 206, 86, 1)', // Yellow border
        backgroundColor: 'rgba(255, 206, 86, 0.2)', // Light Yellow background
        borderWidth: 2,
      },
    ],
  };

  const [currentData, setCurrentData] = useState(initialData);
  const [showNext, setShowNext] = useState(false);
  const [selectedYear, setSelectedYear] = useState(2023);

  const toggleData = () => {
    setCurrentData(showNext ? initialData : nextData);
    setShowNext(!showNext);
  };

  const handleYearChange = (year) => {
    setSelectedYear(year);
    // Logic to fetch and update data for the selected year
    // For simplicity, this example does not include additional year data.
  };

  return (
    <div style={{ position: 'relative', width: '100%', height: '100%' }}>
      <Line
        data={currentData}
        options={{
          maintainAspectRatio: false,
          plugins: {
            legend: {
              display: true,
              position: 'top',
            },
            title: {
              display: true,
              text: `Performance Metrics - ${selectedYear}`,
              padding: {
                top: 2,
                bottom: 5,
              },
            },
          },
          scales: {
            y: {
              beginAtZero: true,
              title: {
                display: true,
                text: 'Value',
              },
            },
            x: {
              title: {
                display: true,
                text: 'Months',
              },
            },
          },
        }}
      />
      <div
        style={{
          position: 'absolute',
          bottom: '10px',
          left: '10px',
          cursor: 'pointer',
        }}
        onClick={toggleData}
      >
        {showNext ? 'Show Previous' : 'Show Next'}
      </div>
      <div
        style={{
          position: 'absolute',
          bottom: '10px',
          right: '10px',
          cursor: 'pointer',
        }}
      >
        <button onClick={() => handleYearChange(2021)}>2021</button>
        <button onClick={() => handleYearChange(2022)}>2022</button>
      </div>
    </div>
  );
};

export default LineGraph;
```

These changes will update the colors in each chart to the specified colors. Adjust the colors as needed to fit your design.
